package com.techidea.dblibrary.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.techidea.dblibrary.db.PrintDataItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRINT_DATA_ITEM".
*/
public class PrintDataItemDao extends AbstractDao<PrintDataItem, Long> {

    public static final String TABLENAME = "PRINT_DATA_ITEM";

    /**
     * Properties of entity PrintDataItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Printdata = new Property(1, String.class, "printdata", false, "PRINTDATA");
        public final static Property Position = new Property(2, Integer.class, "position", false, "POSITION");
        public final static Property Doubleformat = new Property(3, Integer.class, "doubleformat", false, "DOUBLEFORMAT");
        public final static Property Printermode = new Property(4, Integer.class, "printermode", false, "PRINTERMODE");
        public final static Property Inserttime = new Property(5, Long.class, "inserttime", false, "INSERTTIME");
    };


    public PrintDataItemDao(DaoConfig config) {
        super(config);
    }
    
    public PrintDataItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRINT_DATA_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PRINTDATA\" TEXT," + // 1: printdata
                "\"POSITION\" INTEGER," + // 2: position
                "\"DOUBLEFORMAT\" INTEGER," + // 3: doubleformat
                "\"PRINTERMODE\" INTEGER," + // 4: printermode
                "\"INSERTTIME\" INTEGER);"); // 5: inserttime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRINT_DATA_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PrintDataItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String printdata = entity.getPrintdata();
        if (printdata != null) {
            stmt.bindString(2, printdata);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(3, position);
        }
 
        Integer doubleformat = entity.getDoubleformat();
        if (doubleformat != null) {
            stmt.bindLong(4, doubleformat);
        }
 
        Integer printermode = entity.getPrintermode();
        if (printermode != null) {
            stmt.bindLong(5, printermode);
        }
 
        Long inserttime = entity.getInserttime();
        if (inserttime != null) {
            stmt.bindLong(6, inserttime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PrintDataItem readEntity(Cursor cursor, int offset) {
        PrintDataItem entity = new PrintDataItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // printdata
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // position
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // doubleformat
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // printermode
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // inserttime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PrintDataItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrintdata(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPosition(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDoubleformat(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPrintermode(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setInserttime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PrintDataItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PrintDataItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
